head(all_2kb_regions)
columns = c("hs_gene", "pvalue", "direction")
df = data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(df) = columns
for (hs_name in list_HS_genes) {
HS_gene <- read.table(paste0(species_name, "_", hs_name, "_2kbUP.bed"), sep = "\t", header = FALSE)
HS_geneGR <- toGRanges(HS_gene)
head(HS_gene)
all_minus_HSgenes <- all_2kb_regions[!all_2kb_regions$V4 %in% HS_gene$V4, ]
head(all_minus_HSgenes)
all_2kb_regionsGR <- toGRanges(all_minus_HSgenes)
numOverlaps(HS_geneGR, all_TEsGR, count.once = TRUE)
pdf(paste0("perm_", hs_name, ".pdf"))
pt = permTest(A = HS_geneGR, ntimes = 1000, randomize.function = resampleRegions, universe = all_2kb_regionsGR,
evaluate.function = numOverlaps, count.once = TRUE, B = all_TEsGR, verbose = FALSE, alternative = "auto")
plot(pt)
dev.off()
sum_res = summary(pt)
res_pvalue = format(round(sum_res$pvalue, 4), nsmall = 4)
zscore = format(round(sum_res$zscore, 4), nsmall = 4)
print("ZSCORE=", zscore)
direction = sum_res$test
df[nrow(df) + 1,] <- list(hs_name, res_pvalue, zscore, direction)
}
write.table(df, file = "perm-test_res.tsv", sep = "\t", quote = FALSE, row.names = FALSE)
}
all_genes = "dari_genes_2000upstream.bed"
TEs_bed = "dari_all_TEs_noverlap.bed"
species_name = "dari"
permut_test(all_genes, TEs_bed, species_name)
permut_test <- function (gene_bedf, TEs_bedf, spc_name) {
all_TEs <- read.table(paste0(TEs_bedf), sep = "\t", header = FALSE)
all_TEsGR <- toGRanges(all_TEs)
all_2kb_regions <- read.table(gene_bedf, sep = "\t", header = FALSE)
head(all_2kb_regions)
columns = c("hs_gene", "pvalue", "direction")
df = data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(df) = columns
for (hs_name in list_HS_genes) {
HS_gene <- read.table(paste0(species_name, "_", hs_name, "_2kbUP.bed"), sep = "\t", header = FALSE)
HS_geneGR <- toGRanges(HS_gene)
head(HS_gene)
all_minus_HSgenes <- all_2kb_regions[!all_2kb_regions$V4 %in% HS_gene$V4, ]
head(all_minus_HSgenes)
all_2kb_regionsGR <- toGRanges(all_minus_HSgenes)
numOverlaps(HS_geneGR, all_TEsGR, count.once = TRUE)
pdf(paste0("perm_", hs_name, ".pdf"))
pt = permTest(A = HS_geneGR, ntimes = 1000, randomize.function = resampleRegions, universe = all_2kb_regionsGR,
evaluate.function = numOverlaps, count.once = TRUE, B = all_TEsGR, verbose = FALSE, alternative = "auto")
plot(pt)
dev.off()
sum_res = summary(pt)
res_pvalue = format(round(sum_res$pvalue, 4), nsmall = 4)
zscore = format(round(sum_res$zscore, 4), nsmall = 4)
paste("ZSCORE=", zscore)
direction = sum_res$test
df[nrow(df) + 1,] <- list(hs_name, res_pvalue, zscore, direction)
}
write.table(df, file = "perm-test_res.tsv", sep = "\t", quote = FALSE, row.names = FALSE)
}
all_genes = "dari_genes_2000upstream.bed"
TEs_bed = "dari_all_TEs_noverlap.bed"
species_name = "dari"
permut_test(all_genes, TEs_bed, species_name)
permut_test <- function (gene_bedf, TEs_bedf, spc_name) {
all_TEs <- read.table(paste0(TEs_bedf), sep = "\t", header = FALSE)
all_TEsGR <- toGRanges(all_TEs)
all_2kb_regions <- read.table(gene_bedf, sep = "\t", header = FALSE)
head(all_2kb_regions)
columns = c("hs_gene", "pvalue", "zscore" ,"direction")
df = data.frame(matrix(nrow = 0, ncol = length(columns)))
colnames(df) = columns
for (hs_name in list_HS_genes) {
HS_gene <- read.table(paste0(species_name, "_", hs_name, "_2kbUP.bed"), sep = "\t", header = FALSE)
HS_geneGR <- toGRanges(HS_gene)
head(HS_gene)
all_minus_HSgenes <- all_2kb_regions[!all_2kb_regions$V4 %in% HS_gene$V4, ]
head(all_minus_HSgenes)
all_2kb_regionsGR <- toGRanges(all_minus_HSgenes)
numOverlaps(HS_geneGR, all_TEsGR, count.once = TRUE)
pdf(paste0("perm_", hs_name, ".pdf"))
pt = permTest(A = HS_geneGR, ntimes = 1000, randomize.function = resampleRegions, universe = all_2kb_regionsGR,
evaluate.function = numOverlaps, count.once = TRUE, B = all_TEsGR, verbose = FALSE, alternative = "auto")
plot(pt)
dev.off()
sum_res = summary(pt)
res_pvalue = format(round(sum_res$pvalue, 4), nsmall = 4)
zscore = format(round(sum_res$zscore, 4), nsmall = 4)
paste("ZSCORE=", zscore)
direction = sum_res$test
df[nrow(df) + 1,] <- list(hs_name, res_pvalue, zscore, direction)
}
write.table(df, file = "perm-test_res.tsv", sep = "\t", quote = FALSE, row.names = FALSE)
}
all_genes = "dari_genes_2000upstream.bed"
TEs_bed = "dari_all_TEs_noverlap.bed"
species_name = "dari"
permut_test(all_genes, TEs_bed, species_name)
# Load the necessary library
library(ggplot2)
# Create the dataframe
data <- data.frame(
hs_gene = c("obp", "or"),
pvalue = c(0.3407, 0.0010),
zscore = c(-0.6218, 3.6452),
direction = c("less", "greater")
)
# Create the plot
plot <- ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey"))) +
scale_color_identity() +
theme_minimal() +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Print the plot
print(plot)
# Load the necessary library
library(ggplot2)
# Create the dataframe
data <- data.frame(
hs_gene = c("obp", "or"),
pvalue = c(0.3407, 0.0010),
zscore = c(-0.6218, 3.6452),
direction = c("less", "greater")
)
data
# Create the plot
plot <- ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey"))) +
scale_color_identity() +
theme_minimal() +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Print the plot
print(plot)
# Print the plot
plot
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey"))) +
scale_color_identity() +
theme_minimal() +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Load the necessary library
library(ggplot2)
# Create the dataframe
data <- data.frame(
hs_gene = c("obp", "or"),
pvalue = c(0.3407, 0.0010),
zscore = c(-0.6218, 3.6452),
direction = c("less", "greater")
)
data
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey"))) +
scale_color_identity() +
theme_minimal() +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey"))) +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey"))) +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-3, 3)) +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 2) +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 5) +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 4) +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 4) +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 3, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 4, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 5, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
data <- read.csv("perm-test_res.tsv")
head(data)
data <- read.csv("perm-test_res.tsv", sep = "\t")
head(data)
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 5, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 5, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "D. arizonae")
data
# Set the order of hs_gene
data$hs_gene <- factor(data$hs_gene, levels = data$hs_gene)
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 3, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 5, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "D. arizonae")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 3, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "D. arizonae")
# Set the order of hs_gene
data$hs_gene <- factor(data$hs_gene, levels = data$hs_gene)
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 3, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Set the order of hs_gene
data$hs_gene <- factor(data$-hs_gene, levels = data$hs_gene)
# Set the order of hs_gene
data$hs_gene <- factor(data$hs_gene, levels = -data$hs_gene)
# Set the order of hs_gene
data$hs_gene <- factor(data$hs_gene, levels = data$hs_gene)
# Set the order of hs_gene
data$hs_gene <- factor(data$hs_gene, levels = rev(data$hs_gene))
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 3, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
# Set the order of hs_gene in the opposite order
data$hs_gene <- factor(data$hs_gene, levels = rev(data$hs_gene))
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 3, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
data <- read.csv("perm-test_res.tsv", sep = "\t")
head(data)
data
# Set the order of hs_gene in the opposite order
data$hs_gene <- factor(data$hs_gene, levels = rev(data$hs_gene))
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 3, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "Plot of Z-scores by HS Gene")
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 5, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "D. arizonae")
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 4, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "D. arizonae")
head(data)
data
head(data)
# Create the dataframe
data <- data.frame(
hs_gene = c("obp", "or"),
pvalue = c(0.3407, 0.0010),
zscore = c(-0.6218, 3.6452),
direction = c("less", "greater")
)
data <- read.csv("perm-test_res.tsv", sep = "\t")
df$hs_gene[df$hs_gene == "gustatory"] <- "GR"
df$hs_gene[df$hs_gene == "ionotropic"] <- "IR"
df$hs_gene[df$hs_gene == "p450"] <- "CYP"
data <- read.csv("perm-test_res.tsv", sep = "\t")
data <- read.csv("perm-test_res.tsv", sep = "\t")
data$hs_gene[data$hs_gene == "gustatory"] <- "GR"
data$hs_gene[data$hs_gene == "ionotropic"] <- "IR"
data$hs_gene[data$hs_gene == "p450"] <- "CYP"
df$hs_gene <- toupper(df$hs_gene)
head(data)
data$hs_gene <- toupper(data$hs_gene)
head(data)
data
data <- read.csv("perm-test_res.tsv", sep = "\t")
data$hs_gene[data$hs_gene == "gustatory"] <- "GR"
data$hs_gene[data$hs_gene == "ionotropic"] <- "IR"
data$hs_gene[data$hs_gene == "esterase"] <- "EST"
data$hs_gene[data$hs_gene == "p450"] <- "CYP"
data$hs_gene <- toupper(data$hs_gene)
head(data)
data
# Set the order of hs_gene in the opposite order
data$hs_gene <- factor(data$hs_gene, levels = rev(data$hs_gene))
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 4, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "D. arizonae")
# Create the plot
plot <- ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 4, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "HS Gene", title = "D. arizonae")
ggsave("plot.svg", plot = plot, width = 8, height = 6, units = "in")
install.packages("svglite")
ggsave("plot.svg", plot = plot, width = 8, height = 6, units = "in")
ggsave("plot.svg", plot = plot, width = 8, height = 2)
ggsave("plot.svg", plot = plot, width = 2, height = 8)
ggsave("plot.svg", plot = plot, width = 2, height = 4)
ggsave("plot.pdf", plot = plot, width = 2, height = 4)
ggsave("plot.pdf", plot = plot, width = 4, height = 8)
ggsave("plot.pdf", plot = plot, width = 3, height = 6)
ggsave("plot.pdf", plot = plot, width = 3, height = 5.5)
ggsave("plot.pdf", plot = plot, width = 3, height = 5)
ggsave(paste0(species_name,"_enrichment_permut.pdf"), plot = plot, width = 3, height = 5)
species_name = "dari"
ggsave(paste0(species_name,"_enrichment_permut.pdf"), plot = plot, width = 3, height = 5)
# Create the plot
plot <- ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = ifelse(pvalue < 0.05, "red", "grey")), size = 4, shape = 21, stroke = 1, fill = ifelse(data$pvalue < 0.05, "red", "grey"), color = "black") +
scale_color_identity() +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name))
ggsave(paste0(species_name,"_enrichment_permut.pdf"), plot = plot, width = 3, height = 5)
###Import dataframe and fix gene names
data <- read.csv("perm-test_res.tsv", sep = "\t")
data$hs_gene[data$hs_gene == "gustatory"] <- "GR"
data$hs_gene[data$hs_gene == "ionotropic"] <- "IR"
data$hs_gene[data$hs_gene == "esterase"] <- "EST"
data$hs_gene[data$hs_gene == "p450"] <- "CYP"
data$hs_gene <- toupper(data$hs_gene)
### Set the order of hs_gene in the opposite order
data$hs_gene <- factor(data$hs_gene, levels = rev(data$hs_gene))
# Create the plot
ggplot(df, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = pvalue), size = 4, shape = 21, stroke = 1, fill = "white") +
scale_color_gradient(low = "red", high = "green") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
library(ggplot2)
# Create the plot
ggplot(df, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = pvalue), size = 4, shape = 21, stroke = 1, fill = "white") +
scale_color_gradient(low = "red", high = "green") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = pvalue), size = 4, shape = 21, stroke = 1, fill = "white") +
scale_color_gradient(low = "red", high = "green") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(color = pvalue), size = 4, shape = 21, stroke = 1) +
scale_color_gradient(low = "red", high = "green") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(fill = pvalue), size = 4, shape = 21, stroke = 1, color = "black") +
scale_fill_gradient(low = "red", high = "green") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(fill = pvalue), size = 4, shape = 21, stroke = 1, color = "black") +
scale_fill_gradient(low = "red", high = "navy") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(fill = pvalue), size = 4, shape = 21, stroke = 1, color = "black") +
scale_fill_gradient(low = "red", high = "blue") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(fill = pvalue), size = 4, shape = 21, stroke = 1, color = "black") +
scale_fill_gradient(low = "red", high = "darkblue") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(fill = pvalue), size = 4, shape = 21, stroke = 1, color = "black") +
scale_fill_gradient(low = "pink", high = "darkblue") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(fill = pvalue), size = 4, shape = 21, stroke = 1, color = "black") +
scale_fill_gradient(low = "red", high = "pink") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
# Create the plot
ggplot(data, aes(x = zscore, y = hs_gene)) +
geom_point(aes(fill = pvalue), size = 4, shape = 21, stroke = 1, color = "black") +
scale_fill_gradient(low = "red", high = "yellow") +
theme_minimal() +
scale_x_continuous(limits = c(-4, 4)) +
geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
labs(x = "Z-score", y = "", title = paste0(species_name)) +
theme(legend.title = element_blank())
